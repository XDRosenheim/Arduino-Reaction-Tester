/* PIN CONFIG */
int buttonPin = 2;    // The pin for the button
int ledPin = 5;   // The pin for the light
int speakerPin = 8;  // Optional

/* RUN CONFIG */
const int runTimes = 3;   // How many times the loop should run -1
int minRandomTime = 500;  // milliseconds
int maxRandomTime = 5000; // milliseconds

/* INITS */
int startTime = 0;
int endTime = 0;
int runs = 0;
int reactionTime = 0;
int timeout = 0;
int tempScores[runTimes];
boolean isRunning = false;
boolean isButtonPressed = false;
long randomTime;    // Make a random
float result = 0;   // The result of the test

/* RUN FOREST, RUN */
void setup() {
  pinMode(buttonPin, INPUT_PULLUP); digitalWrite(buttonPin, HIGH);
  pinMode(ledPin, OUTPUT);
  Serial.begin(9600);
  Serial.println(" ** Start ** ");
  digitalWrite(ledPin, HIGH);
  delay(500);
  digitalWrite(ledPin, LOW);
  tone(speakerPin, 1500, 20);
}

// Do a barrleroll
void loop() {
  if (runs < runTimes && isRunning == false) {
    Start(randomTime);
  }
  if (runs == runTimes) {
    // See individual times (In milliseconds)
    //    for (int i = 0; i < runs; i++) {
    //      Serial.println(tempScores[i]);
    //    }
    Serial.print(F("result "));
    for (int i = 0; i < runTimes; i++) {
      result += tempScores[i];
    }
    Serial.print((result / runTimes) / 1000);
    Serial.println(F(" second(s)"));
    runs = (runTimes + 1);
    Serial.println(F(" ** End ** "));
  }
}

void Start(int randInt) {
  isRunning = true;
  randomTime = Random(minRandomTime, maxRandomTime);
  delay(randomTime);
  startTime = millis();
  timeout = millis();
  digitalWrite(ledPin, HIGH);
  while (digitalRead(buttonPin)) {
    delay(5); //Debounce
    if ((timeout + 5000) < millis()) {
      tone(speakerPin, 200, 200);
      Serial.println(F("Subject is dead"));
      runs = runTimes + 1; // IT'S OVER!
      Serial.println(F(" ** End ** "));
      break;
    }
    Stop();
  }
  digitalWrite(ledPin, LOW);
  Save(endTime - startTime, runs);
  runs++;
}

void Stop() {
  isRunning = false;
  endTime = millis();
  reactionTime = endTime - startTime;
}

void Save(int Time, int slot) {
  tempScores[runs] = reactionTime;
}

long Random(long mini, long maxi) {
  //Serial.println(F("Random")); // Debugger
  return random(mini, maxi);
}
